Title: Auvik, Connectwise integration in Grafana - Blackcoffer Insights

HomeOur Success StoriesAuvik, Connectwise integration in GrafanaOur Success StoriesITProduction & ManufacturingAuvik, Connectwise integration in GrafanaByAjay Bidyarthy-July 13, 20223156Client BackgroundClient:A Leading Tech Firm in the USAIndustry Type:IT & ConsultingServices:Software, Business Solutions, ConsultingOrganization Size:200+Project ObjectiveGet statistics such as uptime,  availability, cpu throughput etc. from Auvik and Connectwise and make a dashboard from it in Grafana.Project DescriptionUnlike many technologies for which plugins are readily available in Grafana, there are none for auvik and Connectwise. So our task was to device a solution through which all the data from Auvik and Connectwise can be fed to Grafana. This data then would be used to plot graphs in Grafana.Our SolutionSetup Postgres on linuxCreate appropriate databases, tables and users in it.Use python to get data from Auvik and Connectwise and perform necessary preprocesing.In the same python file, Connect to our postgres database.Ingest this data into postgres database.Setup Grafana.Connect Grafana to postgres using the postgres plugin.Query our postgres database in Grafana to get desired results.Plot multiple graphs according to client’s requirement and make a dashboard from itProject DeliverablesSetup PostgresSetup Postrges in GrafanaWrite Python code to get data from Auvik and Connectwise into PostrgesPlot graphs into Grafana according to client’s requirementMake dashboards for all the graphsTools usedGrafanaPostgresVs CodeAWSPostmanLanguage/techniques usedPythonbashSkills usedPythonnetworkingData visualisationDatabases usedPostgresWeb Cloud Servers usedAmazon Web Services (AWS)What are the technical Challenges Faced during Project ExecutionSince, the data received from Auvik was in Json fromat, our first approach was to use Grafana’s built-in Json plugin. But this wasn’t working since, the data received from Auvik was multi-dimensional when the Json plugin required One dimensional data.How the Technical Challenges were SolvedThe above challenge was addressed by transforming the multi- dimensional data into one dimensional when it was store in a python variable. This transformed data was then inserted into Postgres.Project SnapshotsProject website urlhttps://github.com/AjayBidyarthy/Henry-PardoProject Videohttps://www.youtube.com/watch?v=7CcbdfjkBzc&ab_channel=BlackcofferPrevious articleData integration and big data performance using ElasticsearchNext articlePortfolio: Website, Dashboard, SaaS Applications, Web AppsAjay BidyarthyRELATED ARTICLESMORE FROM AUTHORAI and ML-Based YouTube Analytics and Content Creation Tool for Optimizing Subscriber Engagement and Content StrategyEnhancing Front-End Features and Functionality for Improved User Experience and Dashboard Accuracy in Partner Hospital ApplicationROAS Dashboard for Campaign-Wise Google Ads Budget Tracking Using Google Ads APMOST POPULAR INSIGHTSCOVID-19: How have countries been responding?April 30, 2020ELK Stack – Elastic QueriesAugust 20, 2021INDUSTRIAL REVOLUTION 4.0 – PROS AND CONSApril 10, 2020Will Machine Replace The Human in the Future of Work?June 25, 2021Load moreRECOMMENDED INSIGHTSAdvanced Data Visualization Solutions for Monitoring Key Business Metrics with Integrated,...How will COVID-19 affect the world of work?Evaluating Logistic Regression ModelsSentiment Analysis of a Leading Restaurants Chain in the USA